/*
 * Created on 2018-10-27 ( Date ISO 2018-10-27 - Time 19:57:23 )
 * Generated by 
*/
package com.gotracrat.managelocation.service;

import java.util.ArrayList;
import java.util.List;

import com.gotracrat.managelocation.exception.ResourceNotFoundException;
import com.gotracrat.managelocation.utils.GoTracratConstants;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gotracrat.managelocation.resource.AttributeNameResource;
import com.gotracrat.managelocation.resource.AttributeTypeResource;
import com.gotracrat.managelocation.resource.AttributeValueResource;
import com.gotracrat.managelocation.resource.ProfileResource;
import com.gotracrat.managelocation.resource.TypeResource;
import com.gotracrat.managelocation.entity.AspnetMembership;
import com.gotracrat.managelocation.entity.AspnetUsers;
import com.gotracrat.managelocation.entity.Attributetype;
import com.gotracrat.managelocation.entity.Attributevalue;
import com.gotracrat.managelocation.entity.Profile;
import com.gotracrat.managelocation.entity.Type;
import com.gotracrat.managelocation.repository.AspnetMembershipRepository;
import com.gotracrat.managelocation.repository.UsersRepository;
import com.gotracrat.managelocation.repository.AttributevalueRepository;
import com.gotracrat.managelocation.repository.ProfileDAOImpl;
import com.gotracrat.managelocation.repository.ProfileRepository;

/**
 * Service implementation for Profile.
 * 
 * @author Prabhakar
 */
@Service
public class ProfileServiceImpl implements ProfileService {

	@Autowired
	private ProfileRepository profileRepository;
	
	@Autowired
	private ProfileDAOImpl ProfileDAOImpl;
	
	@Autowired
	private AttributevalueRepository attributevalueRepository;
	
	
	
	@Autowired
	private UsersRepository aspnetUsersRepository;

	@Autowired
	private AspnetMembershipRepository aspnetMembershipRepository;


	@Override
	public Profile get(Integer profileid) {
		return profileRepository.findById(profileid).orElseThrow(() ->
				new ResourceNotFoundException(GoTracratConstants.PROFILE_NOT_FOUND));
	}

	@Override
	public Boolean delete(Integer profileid) {
		if (profileRepository.findById(profileid).isPresent()) {
			profileRepository.deleteById(profileid);
			return true;
		}
		return false;
	}

	@Override
	public Profile create(Profile profile) {
		return profileRepository.save(profile);
	}

	@Override
	public Profile save(Profile profile) {
		final Integer pk = profile.getProfileid();
		if (profileRepository.findById(pk).isPresent()) {
			return profileRepository.save(profile);
		}
		return null;
	}

	@Override
	public Boolean exist(Profile profile) {
		return profileRepository.existsById(profile.getProfileid());
	}
	@Override
	public ProfileResource save(ProfileResource profileResource, Integer profileId, Integer companyId) {
		Profile profile= profileRepository.findByprofileidAndCompanyid(profileId, companyId);
		if(profile!=null)
		{
			profile.setIsowneradmin(profileResource.getIsowneradmin());
			profile.setHidepricing(profileResource.getHidepricing());
			profile.setIsOwnerAdminReadOnly(profileResource.getIsOwnerAdminReadOnly());
			Profile savedProfile=profileRepository.save(profile);
			ProfileResource profileResource1=new ProfileResource();
			BeanUtils.copyProperties(savedProfile, profileResource1);
			return profileResource1;
		}
		return null;
	}
	
	@Override
	public ProfileResource saveProfile(ProfileResource profileResource, Integer profileId, Integer companyId) {
		Profile profile= profileRepository.findByprofileidAndCompanyid(profileId, companyId);
		
		BeanUtils.copyProperties(profileResource, profile);
		String pk=profile.getUserid();
		AspnetUsers user = aspnetUsersRepository.findById(pk).orElseThrow(() ->
				new ResourceNotFoundException(GoTracratConstants.PROFILE_NOT_FOUND));
		user.setUsername(profileResource.getUsername());
		user.setLoweredusername(profileResource.getUsername());
		aspnetUsersRepository.save(user);
		AspnetMembership aspnetMembership = aspnetMembershipRepository.findById(pk).orElseThrow(() ->
				new ResourceNotFoundException(GoTracratConstants.PROFILE_NOT_FOUND));
		aspnetMembership.setEmail(profileResource.getEmail());
		aspnetMembership.setLoweredemail(profileResource.getEmail());
		 aspnetMembershipRepository.save(aspnetMembership);
		
		return profileResource;
	}
    
	@Override
	public ProfileResource getProfileWithUserId(String userid) {
		return ProfileDAOImpl.getProfileWithUserId(userid);
	}

	public ProfileResource getProfileWithUserId(String userid, String companyId) {
	ProfileResource profile= ProfileDAOImpl.getProfileWithUserId(userid);
	Integer typeId=ProfileDAOImpl.getUserTypeID(companyId);
	profile.setUserTypeId(typeId);
	List<Attributevalue> attributevalueList = attributevalueRepository
			.findByCompositePrimaryKeyEntityidAndCompositePrimaryKeyEntitytypeid(profile.getProfileid(), 9);

	if (attributevalueList != null && !attributevalueList.isEmpty()) {
		List<AttributeValueResource> attributevalueResourceList = this
				.buildAttributevalueResources(attributevalueList);
		profile.setAttributevalues(attributevalueResourceList);
	}
		
		return profile;
		
	}
	private List<AttributeValueResource> buildAttributevalueResources(List<Attributevalue> attributevalues) {

		List<AttributeValueResource> attributevalueResourceList = new ArrayList<>();
		attributevalues.forEach(attributevalue -> {

			AttributeValueResource attributevalueResource = new AttributeValueResource();
			BeanUtils.copyProperties(attributevalue, attributevalueResource);
			attributevalueResource.setEntityid(attributevalue.getEntityid());
			attributevalueResource.setEntitytypeid(attributevalue.getEntitytypeid());

			AttributeNameResource attributenameResource = new AttributeNameResource();
			BeanUtils.copyProperties(attributevalue.getCompositePrimaryKey().getAttributename(), attributenameResource);
			attributenameResource.setAttributenameid(
					attributevalue.getCompositePrimaryKey().getAttributename().getAttributenameid());

			Attributetype attributetype = attributevalue.getCompositePrimaryKey().getAttributename().getAttributetype();
			AttributeTypeResource attributetypeResource = new AttributeTypeResource();
			BeanUtils.copyProperties(attributetype, attributetypeResource);
			attributenameResource.setAttributetype(attributetypeResource);

			Type type = attributevalue.getCompositePrimaryKey().getAttributename().getType();

			TypeResource typeResource = new TypeResource();
			BeanUtils.copyProperties(type, typeResource);
			attributenameResource.setType(typeResource);

			attributevalueResource.setAttributename(attributenameResource);
			attributevalueResourceList.add(attributevalueResource);
		});
		return attributevalueResourceList;
	}

}
