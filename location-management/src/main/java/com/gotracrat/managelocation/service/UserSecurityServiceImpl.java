/*
 * Created on 2018-10-27 ( Date ISO 2018-10-27 - Time 19:57:25 )
 * Generated by
 */
package com.gotracrat.managelocation.service;

import com.gotracrat.managelocation.dto.UserLevelsDTO;
import com.gotracrat.managelocation.dto.UserRolesDTO;
import com.gotracrat.managelocation.entity.UserLog;
import com.gotracrat.managelocation.entity.UserSecurity;
import com.gotracrat.managelocation.entity.UsersecurityKey;
import com.gotracrat.managelocation.entity.VwUserSecurity;
import com.gotracrat.managelocation.exception.ResourceNotFoundException;
import com.gotracrat.managelocation.repository.UserSecurityDAO;
import com.gotracrat.managelocation.repository.UserSecurityRepository;
import com.gotracrat.managelocation.repository.VwUserSecurityRepository;
import com.gotracrat.managelocation.resource.UserSecurityResource;
import com.gotracrat.managelocation.utils.GoTracratConstants;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service implementation for UserSecurity.
 * @author prabhakar
 * @since 2018-10-27
 */
@Service
public class UserSecurityServiceImpl implements UserSecurityService {

    @Autowired
    private UserSecurityRepository userSecurityRepository;

    @Autowired
    private VwUserSecurityRepository vwUserSecurityRepository;

    @Autowired
    UserSecurityDAO userSecurityDAO;


    @Override
    public UserSecurityResource getUserSecurity(String userId, Integer companyId, Integer locationId) {
        UsersecurityKey key = new UsersecurityKey(userId, companyId, locationId);
        Optional<UserSecurity> userSecurity = userSecurityRepository.findById(key);
        if (userSecurity.isPresent()) {
            return buildUserSecurityResource(userSecurity.get());
        }
        throw new ResourceNotFoundException(GoTracratConstants.INVALID_ID);
    }

    private UserSecurityResource buildUserSecurityResource(UserSecurity usersecurity) {
        UserSecurityResource userSecurityResource = new UserSecurityResource();
        BeanUtils.copyProperties(usersecurity, userSecurityResource);
        return userSecurityResource;
    }

    @Override
    public UserSecurityResource createOrUpdateUserSecurity(UserSecurityResource userSecurityResource, UserLog userLog) {
        return buildUserSecurityResource(userSecurityRepository.save(buildUserSecurity(userSecurityResource)));
    }

    private UserSecurity buildUserSecurity(UserSecurityResource userSecurityResource) {
        UserSecurity userSecurity = new UserSecurity();
        BeanUtils.copyProperties(userSecurityResource, userSecurity);
        return userSecurity;
    }

    @Override
    public String delete(String userId, Integer companyId, Integer locationId, UserLog userLog) {
        UsersecurityKey key = new UsersecurityKey(userId, companyId, locationId);
        if (userSecurityRepository.existsById(key)) {
            userSecurityRepository.deleteById(key);
            return GoTracratConstants.USER_SECURITY_DELETED;
        }
        throw new ResourceNotFoundException(GoTracratConstants.INVALID_USER_SECURITY_Id + key);
    }

    @Override
    public List<UserLevelsDTO> getLevels(String username, Integer companyId) {
        return userSecurityDAO.getLevels(username, companyId);
    }

    @Override
    public List<VwUserSecurity> getAllRolesForUser(String userId) {
        return vwUserSecurityRepository.findByCompositePrimaryKeyUseridOrderByCompanyNameAscLocationNameAsc(userId);
    }

    @Override
    public List<UserRolesDTO> getRolesForALoggedInUser(String userName, Integer companyId) {
        return vwUserSecurityRepository.getRolesForALoggedInUser(userName, companyId);
    }
}

	

	

