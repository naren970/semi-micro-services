/*
 * Created on 2018-10-27 ( Date ISO 2018-10-27 - Time 19:57:24 )
 * Generated by
 */
package com.gotracrat.managelocation.controller;

import com.gotracrat.managelocation.service.ReportSecurityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.gotracrat.managelocation.resource.ReportSecurityResource;
import com.gotracrat.managelocation.entity.Reportsecurity;
import lombok.extern.slf4j.Slf4j;

/**
 * Rest controller
 *
 * @author Prabhakar
 */
@RestController
@CrossOrigin(origins = "*", allowedHeaders = "*", maxAge = 100000L)
@RequestMapping(value = "api/v1/reportsecurity")
@Slf4j
public class ReportsecurityController {

    private static final String NOT_FOUND = "Reportsecurity not found";

    @Autowired
    private ReportSecurityService reportsecurityService;

    @Operation(summary = "This is to fetch Report Security by Profile ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Report Security found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Report Security not found",
                    content = @Content)
    })
    @GetMapping("{profileid}")
    public ResponseEntity<ReportSecurityResource> get(@PathVariable("profileid") Integer profileId) {
        log.info("Get Reportsecurity by profileId: " + profileId);
        final Reportsecurity reportsecurity = reportsecurityService.get(profileId);
        if (reportsecurity == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<ReportSecurityResource>((ReportSecurityResource) null, HttpStatus.NOT_FOUND);
        }
        log.info("Reportsecurity Found");
        final ReportSecurityResource reportsecurityResource = new ReportSecurityResource();
        BeanUtils.copyProperties(reportsecurity, reportsecurityResource);
        return new ResponseEntity<ReportSecurityResource>(reportsecurityResource, HttpStatus.OK);
    }

    @Operation(summary = "This is to create Report Security")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Report Security created successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Report Security not found",
                    content = @Content)
    })
    @PostMapping(consumes = "application/json")
    public ResponseEntity<ReportSecurityResource> create(@RequestBody Reportsecurity reportsecurity) {
        log.info("Reportsecurity creation requet");
        if (reportsecurityService.exist(reportsecurity)) {
            log.info("Reportsecurity already exist");
            return new ResponseEntity<ReportSecurityResource>((ReportSecurityResource) null, HttpStatus.CONFLICT);
        } else {
            final Reportsecurity created = reportsecurityService.create(reportsecurity);
            log.info("Reportsecurity Created Successfully");
            return new ResponseEntity<ReportSecurityResource>(new ReportSecurityResource(), HttpStatus.OK);
        }
    }

    @Operation(summary = "This is to update Report Security by Profile ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Report Security updated successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Report Security not found",
                    content = @Content)
    })
    @PutMapping(value = "{profileid}", consumes = "application/json")
    public ResponseEntity<ReportSecurityResource> update(@PathVariable("profileid") Integer profileId,
                                                         @RequestBody ReportSecurityResource reportsecurity) {
        log.info("Reportsecurity update request by profileId: " + profileId);
        reportsecurity.setProfileid(profileId);
        ReportSecurityResource reportsecurityResourceSaved = reportsecurityService.save(reportsecurity);
        if (reportsecurityResourceSaved == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<ReportSecurityResource>(HttpStatus.NOT_FOUND);
        }
        log.info("Reportsecurity successfully updated");
        return new ResponseEntity<ReportSecurityResource>(reportsecurityResourceSaved, HttpStatus.OK);

    }

    @Operation(summary = "This is to delete Report Security by Profile ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Report Security deleted successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Report Security not found",
                    content = @Content)
    })
    @DeleteMapping("{profileid}")
    public ResponseEntity<String> delete(@PathVariable("profileid") Integer profileId) {
        log.info("Reportsecurity deletion request by profileId: " + profileId);
        return ResponseEntity.ok(reportsecurityService.delete(profileId));
    }
}
