/*
 * Created on 2018-10-27 ( Date ISO 2018-10-27 - Time 19:57:23 )
 * Generated by
 */
package com.gotracrat.managelocation.controller;

import com.gotracrat.managelocation.entity.AspnetUsers;
import com.gotracrat.managelocation.entity.UserLog;
import com.gotracrat.managelocation.resource.AspnetMembershipResource;
import com.gotracrat.managelocation.resource.AspnetUsersResource;
import com.gotracrat.managelocation.resource.LogManagementResource;
import com.gotracrat.managelocation.resource.ProfileResource;
import com.gotracrat.managelocation.service.AspnetMembershipService;
import com.gotracrat.managelocation.service.UsersService;
import com.gotracrat.managelocation.utils.GoTracratConstants;
import com.gotracrat.managelocation.utils.GotracratUtility;
import com.gotracrat.managelocation.utils.ModulesEnum;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.List;

/**
 * Rest controller
 *
 * @author Prabhakar
 */
@RestController
@CrossOrigin(origins = "*", allowedHeaders = "*", maxAge = 100000L)
@RequestMapping(value = "api/v1/users")
@Slf4j
public class UsersController {

    private static final String NOT_FOUND = "AspnetUsers not found";

    @Autowired
    private UsersService aspnetUsersService;

    @Autowired
    private AspnetMembershipService aspnetMembershipService;


    @Operation(summary = "This is to fetch User Count by Email ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Count found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Count not found",
                    content = @Content)
    })
    @GetMapping("/usercountbyemail/{emailid:.+}")
    public ResponseEntity<Integer> getUserCountByEmail(@PathVariable("emailid") String emailId) {
        log.info("Check duplicate email: " + emailId);
        final Integer usercount = aspnetMembershipService.getUserCountByEmail(emailId);
        if (usercount == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<Integer>((Integer) null, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<Integer>(usercount, HttpStatus.OK);
    }

    @Operation(summary = "This is to fetch User Count by Name")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Count found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Count not found",
                    content = @Content)
    })
    @GetMapping("usercount/{username}")
    public ResponseEntity<Integer> getUserCountByName(@PathVariable("username") String userName) {
        log.info("Check duplicate userName: " + userName);
        final Integer usercount = aspnetUsersService.getUserCountByUserName(userName);
        if (usercount == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<Integer>((Integer) null, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<Integer>(usercount, HttpStatus.OK);
    }

    @Operation(summary = "This is to fetch User ID by Name")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User ID found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User ID not found",
                    content = @Content)
    })
    @GetMapping("{username}")
    public ResponseEntity<AspnetUsers> getUserIdByName(@PathVariable("username") String userName) {
        log.info("Get User by userName: " + userName);
        final AspnetUsers user = aspnetUsersService.getUserIDByUserName(userName);
        if (user == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<AspnetUsers>((AspnetUsers) null, HttpStatus.NOT_FOUND);
        }
        log.info("User found");
        return new ResponseEntity<AspnetUsers>(user, HttpStatus.OK);
    }

    @Operation(summary = "This is to create User by Company ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User created successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Page not found",
                    content = @Content)
    })
    @PostMapping(value = "{companyid}", consumes = "application/json")
    public ResponseEntity<AspnetUsersResource> create(@RequestBody AspnetUsersResource aspnetUsers,
                                                      @PathVariable("companyid") Integer companyId) {
        log.info("User creation request in company: " + companyId);
        aspnetUsers.setActualCompanyId(companyId);
        String actionComment = "User" + " " + aspnetUsers.getUsername() + " " + GoTracratConstants.CREATED_BY + " "
                + aspnetUsers.getAddedBy();
        UserLog userLog = getUserLog(companyId, aspnetUsers.getAddedBy(), ModulesEnum.USER.getModule(), actionComment);
        final AspnetUsersResource created = aspnetUsersService.create(aspnetUsers, userLog);
        if (created == null)
            return new ResponseEntity<AspnetUsersResource>(created, HttpStatus.NOT_FOUND);
        log.info("User Created Successfully", created);
        return new ResponseEntity<AspnetUsersResource>(created, HttpStatus.OK);
    }

    @Operation(summary = "This is to update User by User ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User updated successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User not found",
                    content = @Content)
    })
    @PutMapping(value = "{userid}", consumes = "application/json")
    public ResponseEntity<Void> update(@PathVariable("userid") String userid, @RequestBody ProfileResource profileResource) {
        profileResource.setUserid(userid);
        aspnetUsersService.save(profileResource);
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @Operation(summary = "This is to fetch all User Profiles by Company ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Profiles found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Profiles not found",
                    content = @Content)
    })
    @GetMapping("getUserProfiles/{companyid}")
    public ResponseEntity<List<ProfileResource>> getUserProfiles(@PathVariable("companyid") Integer companyId)
            throws IllegalAccessException, InvocationTargetException, SQLException {
        log.info("Get User Profiles by companyId: " + companyId);
        final List<ProfileResource> profiles = aspnetUsersService.getUserNames(companyId);
        if (profiles == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<List<ProfileResource>>(profiles, HttpStatus.NOT_FOUND);
        }
        log.info("User profiles Found");
        return new ResponseEntity<List<ProfileResource>>(profiles, HttpStatus.OK);
    }

    @Operation(summary = "This is to fetch User Profiles as Admin by Company ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Profiles found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Profiles not found",
                    content = @Content)
    })
    @GetMapping("getUserProfilesAsAdmin/{companyid}")
    public ResponseEntity<List<ProfileResource>> getUserProfilesAsAdmin(@PathVariable("companyid") Integer companyId)
            throws IllegalAccessException, InvocationTargetException, SQLException {
        log.info("Get UserProfilesAsAdmin by companyId: " + companyId);
        final List<ProfileResource> profiles = aspnetUsersService.getUserProfilesAsAdmin(companyId);
        if (profiles == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity<List<ProfileResource>>(profiles, HttpStatus.NOT_FOUND);
        }
        log.info("UserProfiles Found as admin");
        return new ResponseEntity<List<ProfileResource>>(profiles, HttpStatus.OK);
    }


    @Operation(summary = "This is to change Password for User Profile")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Password changed successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User not found",
                    content = @Content)
    })
    @PostMapping(value = "/changepassword", consumes = "application/json")
    public ResponseEntity<AspnetMembershipResource> changePassword(
            @RequestBody AspnetMembershipResource aspnetMembershipResource) {
        log.info("Change password request");
        final AspnetMembershipResource aspnetMembership = aspnetUsersService.changePassword(aspnetMembershipResource);
        if (aspnetMembership != null) {
            log.info("Password Changed Successfully");
            return new ResponseEntity<AspnetMembershipResource>(aspnetMembership, HttpStatus.OK);
        }
        log.info(NOT_FOUND);
        return new ResponseEntity<AspnetMembershipResource>(HttpStatus.NOT_FOUND);
    }


    @Operation(summary = "This is to update Login Date")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "Login Date updated successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "Page not found",
                    content = @Content)
    })
    @PutMapping(value = "updatelogindate", consumes = "application/json")
    public ResponseEntity<AspnetMembershipResource> updateLoginDate(
            @RequestBody AspnetMembershipResource aspnetMembershipResource) {
        log.info("update logindate");
        final AspnetMembershipResource aspnetMembership = aspnetMembershipService
                .updateLoginDate(aspnetMembershipResource);
        if (aspnetMembership != null) {
            log.info("Logindate updated Successfully", aspnetMembership);
            return new ResponseEntity<AspnetMembershipResource>(aspnetMembership, HttpStatus.OK);
        }
        log.info(NOT_FOUND);
        return new ResponseEntity<AspnetMembershipResource>(HttpStatus.NOT_FOUND);
    }

    @Operation(summary = "This is to fetch User Log by Company ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Log found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Log not found",
                    content = @Content)
    })
    @GetMapping("userlog/{companyid}")
    public ResponseEntity<?> getUserlog(@PathVariable("companyid") String companyId) {
        log.info("UserLog by companyId: " + companyId);
        final List<LogManagementResource> userlog = aspnetMembershipService.getUserlog(companyId);
        if (userlog == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity(null, HttpStatus.NOT_FOUND);
        }
        log.info("Userlog found");
        return new ResponseEntity<List<LogManagementResource>>(userlog, HttpStatus.OK);
    }

    @Operation(summary = "This is to fetch User Log Details by Company ID and Name")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Log Details found",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User Log Details not found",
                    content = @Content)
    })
    @GetMapping("userlogdetails/{companyid}/{userName}")
    public ResponseEntity<?> getUserlogDetails(@PathVariable("companyid") Integer companyId,
                                                           @PathVariable("userName") String userName) {
        log.info("Get Userlog datails by companyId and userName : " + companyId + "," + userName);
        final List<UserLog> userlog = aspnetMembershipService.getUserlogDetails(companyId, userName);
        if (userlog == null) {
            log.info(NOT_FOUND);
            return new ResponseEntity(null,HttpStatus.NOT_FOUND);
        }
        log.info("User datails Found");
        return new ResponseEntity<List<UserLog>>(userlog, HttpStatus.OK);
    }

    @Operation(summary = "This is to update User Logout time by User ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User Logout time updated successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User not found",
                    content = @Content)
    })
    @PutMapping(value = "/updateUserLogOut/{userid}")
    public ResponseEntity<String> updateUserLogOut(@PathVariable("userid") String userId) {
        log.info("Update User Logout time by userId: " + userId);
        if (!StringUtils.isEmpty(userId)) {
            aspnetMembershipService.updateUserLogOut(userId);
            log.info("User Logout time updated succesfully");
            return new ResponseEntity<String>("succesfully updated", HttpStatus.OK);
        }
        log.info(NOT_FOUND);
        return new ResponseEntity<String>("Invalid user id", HttpStatus.NOT_FOUND);
    }


    @Operation(summary = "This is to delete User by User ID, Profile ID and Company ID")
    @io.swagger.v3.oas.annotations.responses.ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200",
                    description = "User deleted successfully",
                    content = {@Content(mediaType = "application/json")}),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404",
                    description = "User not found",
                    content = @Content)
    })
    @DeleteMapping("{userId}/{profileId}/{companyId}/{userName}/{addedBy}")
    public ResponseEntity<String> delete(@PathVariable("userId") String userId, @PathVariable("profileId") Integer profileId, @PathVariable("companyId") Integer companyId,
                                       @PathVariable("userName") String userName, @PathVariable("addedBy") String addedBy) {
        log.info("AspnetUsers deletion request : {}", userId);
        String actionComment = "User" + " " + userName + " " + GoTracratConstants.DELETED_BY + " " + addedBy;
        UserLog userLog = getUserLog(companyId, addedBy, ModulesEnum.USER.getModule(), actionComment);
        return  ResponseEntity.ok(aspnetUsersService.delete(userId, profileId, userLog));
    }

    private UserLog getUserLog(Integer companyId, String userName, String userAction, String actionComment) {
        UserLog userLog = GotracratUtility.getUserLog(userName, companyId, userAction, actionComment);
        return userLog;
    }

}